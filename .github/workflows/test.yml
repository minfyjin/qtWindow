name: Compile and Release Qt6 Proyect

on: push

env:
  QT_VERSION:     "6.2.2"
  GCC_VERSION:  "gcc_64"
  GCC_PATH:     "gcc_64"
  BUILD_TYPE:      Release

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    -
      uses: actions/checkout@v2
#    -
#      name: Check mingw g++ version
#      run: |
#        Write-Output (Get-Command g++.exe).Path
#        g++.exe --version
    # -
      # name: Install correct version of mingw
      # uses: crazy-max/ghaction-chocolatey@v1
      # with:
      #   args: install mingw --version=8.1.0  -y
#    -
#      name: Check mingw directory
#      run: |
#        ls C:\ProgramData\chocolatey\lib\mingw\tools\install\mingw64\bin
    -
      name: Install Qt
      uses: jurplel/install-qt-action@v3
      with:
        host: linux
        target: "desktop"
        version: ${{ env.QT_VERSION }}
        # arch: ${{ env.GCC_VERSION }}
        dir: "${{github.workspace}}/qt"
        install-deps: "true"
    -
      name: Set Qt path and refresh
      run: |
        echo "${{github.workspace}}/qt/Qt/${{ env.QT_VERSION }}/${{ env.GCC_PATH }}/bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
        refreshenv
        #Write-Output (Get-Command g++.exe).Path
        #g++.exe --version
#    -
#      name: Check availability of libraries
#      run: |
#        ls ${{github.workspace}}/qt/Qt/${{ env.QT_VERSION }}/${{ env.GCC_PATH }}/lib/
#    -
#      name: Check availability of binaries
#      run: |
#        ls ${{github.workspace}}/qt/Qt/${{ env.QT_VERSION }}/${{ env.GCC_PATH }}/bin/
#    -
#      name: Prepend path
#      run: echo ":${{github.workspace}}/qt/Qt/${{ env.QT_VERSION }}/mingw73_32/bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
#    -
#      name: Check QMake, CMake and make
#      run: |
#        Write-Output (Get-Command qmake.exe).Path
#        qmake.exe -version
#        Write-Output (Get-Command cmake.exe).Path
#        cmake.exe -version
#        Write-Output (Get-Command mingw32-make.exe).Path
#        mingw32-make.exe -version  
    -
      name: Configure CMake Proyect
      working-directory: ${{github.workspace}}
      env:
        CMAKE_PREFIX_PATH: ${{env.Qt5_Dir}}
      run: cmake -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -B ${{github.workspace}}/build
    -
      name: Build
      # Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}
    -
      name: Compress portable program
      run: |
        mkdir ${{github.workspace}}\build\all\
        cp ${{github.workspace}}/build/RePr ${{github.workspace}}\build\all\
        cd ${{github.workspace}}\build\all\
        windeployqt RePr --release 
        ls
        Compress-Archive -Path ${{github.workspace}}\build\all\ -DestinationPath ${{github.workspace}}\build\final.zip
    -
      name: Release
      uses: softprops/action-gh-release@v1
      if: startsWith(github.ref, 'refs/tags/')
      with:
        files: ${{github.workspace}}/build/final.zip
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
